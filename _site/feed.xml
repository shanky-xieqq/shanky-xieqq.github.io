<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shanky</title>
    <description></description>
    <link>https://shanky-xieqq.github.io/</link>
    <atom:link href="https://shanky-xieqq.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 12 May 2017 09:48:36 +0800</pubDate>
    <lastBuildDate>Fri, 12 May 2017 09:48:36 +0800</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>IE8及以下input的placeholder兼容</title>
        <description>
最近的项目中遇到了需要兼容到IE8的placeholder，稍微记录一下以便以后或者需要的童鞋使用。

网上很多关于IE8placeholder的例子，有两个input重叠的、有使用vlue的，有用span替代placeholder的..很多，我是因为要用到Angular的表单验证，所以想稍微整合一下，整成自己所需要的。

</description>
        <pubDate>Fri, 12 May 2017 00:00:00 +0800</pubDate>
        <link>https://shanky-xieqq.github.io/2017/05/12/how-to-make-placeholder-on-ie/</link>
        <guid isPermaLink="true">https://shanky-xieqq.github.io/2017/05/12/how-to-make-placeholder-on-ie/</guid>
        
        <category>IE</category>
        
        <category>兼容性</category>
        
        
        <category>IE</category>
        
      </item>
    
      <item>
        <title>centos7部署shadowsocks</title>
        <description>
首先需要一台国外的VPS，推荐&lt;a href=&quot;https://www.kvmla.com&quot;&gt;kvmla&lt;/a&gt;有永久8折的优惠码。

VPS选择Centos7的版本，mini或者minimal都可以，服务器当然小点好。

</description>
        <pubDate>Tue, 09 May 2017 00:00:00 +0800</pubDate>
        <link>https://shanky-xieqq.github.io/2017/05/09/how-to-deploy-shadowsocks-on-centos/</link>
        <guid isPermaLink="true">https://shanky-xieqq.github.io/2017/05/09/how-to-deploy-shadowsocks-on-centos/</guid>
        
        <category>centos</category>
        
        <category>shadowsocks</category>
        
        <category>linux</category>
        
        
        <category>centos</category>
        
      </item>
    
      <item>
        <title>让jekyll服务可以在局域网中访问</title>
        <description>
本站是基于jekyll和github pages搭建的，jekyll搭建自己的博客非常方便，通过jekyll serve -w可以持续监控文件的修改情况、编译成HTML并通过HTTP服务给本机（localhost）进行访问。但是当你使用虚拟机的时候，特别是centos虚拟机连图形界面都没有，这时候你必须把它上传到github然后通过github.io来访问，这样改一步传一步很麻烦，由于jekyll将地址绑定到了127.0.0.1，导致局域网的其它机器并不能访问它的服务。原先我也走了很多弯路甚至想搭建Apache服务器来让外机可以访问虚拟机的jekyll项目，但实际上只要改变运行jekyll的参数就可以了

</description>
        <pubDate>Wed, 03 May 2017 00:00:00 +0800</pubDate>
        <link>https://shanky-xieqq.github.io/2017/05/03/how-to-make-jekyll-on-lan/</link>
        <guid isPermaLink="true">https://shanky-xieqq.github.io/2017/05/03/how-to-make-jekyll-on-lan/</guid>
        
        <category>jekyll</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>如何在linux里安装软件[以Chrome为例]</title>
        <description>
当你把linux环境布置好了之后，又有一个蛋疼的事情来了，一些IDE，或者是linux下的软件这么装？当然如果是centos只需要命令式的就好了，一般都只要apt-get一下就OK了，我这里说的是ubuntu或者deepin之类的图形界面式的，我是小白啦，只能从图形开始玩。

</description>
        <pubDate>Mon, 01 May 2017 00:00:00 +0800</pubDate>
        <link>https://shanky-xieqq.github.io/2017/05/01/how-to-install-soft-in-linux/</link>
        <guid isPermaLink="true">https://shanky-xieqq.github.io/2017/05/01/how-to-install-soft-in-linux/</guid>
        
        <category>linux</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>如何利用nvm版本管理器配置Ubuntu的node环境</title>
        <description>
关于linux如何配置node环境，因为node环境需要干净的系统，所以linux是再好不过了，windows一直有不知名的bug，而且网上的node教程大多是面向linux环境的，所以配置一个linux的node环境是最好的，当然你可以用一个VM虚拟机配置linux，新手推荐Ubuntu甚至deepin都可以，图形化，方便有效，后期习惯了再去用centos，cenos主要是命令式的方便学习，不适合初学者，最起码不适合不熟悉linux的孩子。

</description>
        <pubDate>Sun, 30 Apr 2017 00:00:00 +0800</pubDate>
        <link>https://shanky-xieqq.github.io/2017/04/30/how-to-make-ubuntu-node-environment/</link>
        <guid isPermaLink="true">https://shanky-xieqq.github.io/2017/04/30/how-to-make-ubuntu-node-environment/</guid>
        
        <category>node</category>
        
        <category>JavaScript</category>
        
        <category>linux</category>
        
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>前端如何写一个精确的倒计时</title>
        <description>
关于写倒计时大家可能都都比较熟悉，使用 setTimeout 或 setInterval 就可以搞定。几秒钟或者几分钟的倒计时这样写没有问题，但是如果是长时间的倒计时，这样写就会不准确。如果用户修改了他的设备时间，这样的倒计时就没有意义了。今天就说说写一个精确的倒计时的方法。

&lt;img src=&quot;https://img.alicdn.com/tfs/TB18QnlOpXXXXcVXpXXXXXXXXXX-388-256.png&quot; alt=&quot;&quot; /&gt;

</description>
        <pubDate>Fri, 25 Nov 2016 00:00:00 +0800</pubDate>
        <link>https://shanky-xieqq.github.io/2016/11/25/how-to-write-a-count-down/</link>
        <guid isPermaLink="true">https://shanky-xieqq.github.io/2016/11/25/how-to-write-a-count-down/</guid>
        
        <category>countdown</category>
        
        <category>JavaScript</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>使用 JavaScript 创建并下载文件</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;先上代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

本文将介绍如何使用 JavaScript 创建文件，并自动/手动将文件下载。这在导出原始数据时会比较方便。

&lt;h2 id=&quot;section&quot;&gt;先上代码&lt;/h2&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;&lt;span class=&quot;cm&quot;&gt;/**
 * 创建并下载文件
 * @param  {String} fileName 文件名
 * @param  {String} content  文件内容
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createAndDownloadFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;aTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;download&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;aTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createObjectURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;aTag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;revokeObjectURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;blob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

很简单对吧，直接调用这个方法，传入文件名和文件内容，程序新建 a 标签，新建 Blob 对象，将文件名赋给 a 标签，同时将 Blob 对象作为 Url 也赋给 a 标签，模拟点击事件，自动下载成功，最后再回收内存。下面我们来看看具体是怎么操作的。

</description>
        <pubDate>Tue, 22 Nov 2016 00:00:00 +0800</pubDate>
        <link>https://shanky-xieqq.github.io/2016/11/22/js-create-file-and-download/</link>
        <guid isPermaLink="true">https://shanky-xieqq.github.io/2016/11/22/js-create-file-and-download/</guid>
        
        <category>文件</category>
        
        <category>下载</category>
        
        <category>JavaScript</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>Fisher–Yates shuffle 洗牌算法</title>
        <description>
简单来说 Fisher–Yates shuffle 算法是一个用来将一个有限集合生成一个随机排列的算法（数组随机排序）。这个算法生成的随机排列是等概率的。同时这个算法非常高效。

本文主要介绍这个算法的来源、演变、原理。并举出一个例子为大家清晰的描述每次迭代过程。最后使用 JavaScript 代码将算法实现。

&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/7/7c/Riffle_shuffle.jpg/320px-Riffle_shuffle.jpg&quot; alt=&quot;&quot; /&gt;

</description>
        <pubDate>Sun, 16 Oct 2016 00:00:00 +0800</pubDate>
        <link>https://shanky-xieqq.github.io/2016/10/16/shuffle-algorithm/</link>
        <guid isPermaLink="true">https://shanky-xieqq.github.io/2016/10/16/shuffle-algorithm/</guid>
        
        <category>算法</category>
        
        <category>shuffle</category>
        
        <category>乱序</category>
        
        <category>洗牌</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>Git 如何 clone 非 master 分支的代码</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;问题描述&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section&quot;&gt;问题描述&lt;/h2&gt;

我们每次使用命令

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;codehilite&quot;&gt;&lt;code&gt;git clone git@gitlab.xxx.com:xxxxx.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

默认 clone 的是这个仓库的 master 分支。如果最新的代码不在 master 分支上，该如何拿到呢？如下图所示，最新的代码可能在&lt;code class=&quot;highlighter-rouge&quot;&gt;daily/1.4.1&lt;/code&gt;分支上，我们希望拿到这个分支上的代码。

</description>
        <pubDate>Thu, 07 Jul 2016 00:00:00 +0800</pubDate>
        <link>https://shanky-xieqq.github.io/2016/07/07/git-clone-not-master-branch/</link>
        <guid isPermaLink="true">https://shanky-xieqq.github.io/2016/07/07/git-clone-not-master-branch/</guid>
        
        <category>Git</category>
        
        <category>GitHub</category>
        
        <category>分支</category>
        
        
        <category>GitHub</category>
        
      </item>
    
      <item>
        <title>如何使用 babel</title>
        <description>
&lt;a href=&quot;https://babeljs.io/&quot;&gt;Babel&lt;/a&gt; 用于将 ES6 的代码转化为 ES5，使得 ES6 可以在目前的浏览器环境下使用。学习使用 babel 是为了使用 ES2015 做准备。本文将介绍如何使用 babel，以及一些相关的配置。

</description>
        <pubDate>Tue, 14 Jun 2016 00:00:00 +0800</pubDate>
        <link>https://shanky-xieqq.github.io/2016/06/14/how-to-use-babel/</link>
        <guid isPermaLink="true">https://shanky-xieqq.github.io/2016/06/14/how-to-use-babel/</guid>
        
        <category>ES2015</category>
        
        <category>ES6</category>
        
        <category>ES5</category>
        
        <category>babel</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
  </channel>
</rss>
